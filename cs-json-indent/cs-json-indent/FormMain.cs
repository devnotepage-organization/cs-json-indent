using System.Text.Json;
using System.Xml;

namespace cs_json_indent
{
    public partial class FormMain : Form
    {
        public FormMain()
        {
            InitializeComponent();
        }

        /// <summary>
        /// テキストボックスが変更されたときに発生します。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void textBoxInput_TextChanged(object sender, EventArgs e)
        {
            try
            {
                string inputJson = textBoxInput.Text;
                string outputJson = IndentJson(inputJson);
                textBoxOutput.Text = outputJson;
            }
            catch (Exception ex)
            {
                // エラー表示
                textBoxOutput.Text = "error!!" + Environment.NewLine + Environment.NewLine + ex.Message;
            }

        }

        /// <summary>
        /// ドラッグしたときに発生します。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Control_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data?.GetDataPresent(DataFormats.FileDrop) ?? false)
            {
                e.Effect = DragDropEffects.All;
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
        }

        /// <summary>
        /// ドラッグアンドドロップしたときに発生します。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Control_DragDrop(object sender, DragEventArgs e)
        {
            try
            {
                var files = ((string[]?)e.Data?.GetData(DataFormats.FileDrop, false)) ?? new string[0];
                foreach (var f in files)
                {
                    string filePath = f;
                    if (!File.Exists(filePath)) { continue; }
                    // ファイルパス表示
                    textBoxOutput.Text += filePath + Environment.NewLine;
                    // JSONファイル整形
                    string inputJson = File.ReadAllText(filePath);
                    string outputJson = IndentJson(inputJson);
                    File.WriteAllText(filePath, outputJson);
                }
            }
            catch (Exception ex)
            {
                // エラー表示
                textBoxOutput.Text = "error!!" + Environment.NewLine + Environment.NewLine + ex.Message;
            }
        }

        /// <summary>
        /// JSON文字列を見やすくインデントします。
        /// </summary>
        /// <param name="intput">整形前のJSON文字列</param>
        /// <returns>整形後のJSON文字列</returns>
        private static string IndentJson(string inputJson)
        {
            // 入力チェック
            if (inputJson.Length == 0) { return string.Empty; }

            // JSON文字列をオブジェクトに変換
            var obj = JsonSerializer.Deserialize<object>(inputJson);

            // インデントのオプションを設定
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            // オブジェクトをインデント付きのJSON文字列に変換
            string indentedJson = JsonSerializer.Serialize(obj, options);

            // JSON文字列を返却
            return indentedJson;
        }
    }
}
