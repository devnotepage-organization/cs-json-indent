using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace cs_json_indent
{
    public partial class FormMain : Form
    {
        public FormMain()
        {
            InitializeComponent();
        }

        /// <summary>
        /// テキストボックスが変更されたときに発生します。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void textBoxInput_TextChanged(object sender, EventArgs e)
        {
            try
            {
                string inputJson = textBoxInput.Text;
                string outputJson = IndentJson(inputJson);
                textBoxOutput.Text = outputJson;
            }
            catch (Exception ex)
            {
                // エラー表示
                Console.WriteLine("error: " + ex.Message);
            }

        }

        /// <summary>
        /// ドラッグしたときに発生します。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Control_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.All;
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
        }

        /// <summary>
        /// ドラッグアンドドロップしたときに発生します。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Control_DragDrop(object sender, DragEventArgs e)
        {
                   try
            {
     var paths = (string[])e.Data.GetData(DataFormats.FileDrop, false);
            var queue = new Queue<string>();
            foreach (var p in paths)
            {
                queue.Enqueue(p);
                while (queue.Count > 0)
                {
                    var path = queue.Dequeue();
                    if (File.Exists(path) && Path.GetExtension(path).Equals(".json"))
                    {
                        // JSONファイル整形
                        Console.WriteLine("file: " + path);
                        string inputJson = File.ReadAllText(path);
                        string outputJson = IndentJson(inputJson);
                        File.WriteAllText(path, outputJson);
                    }
                    if (Directory.Exists(path))
                    {
                        // ディレクトリ内ファイル取得
                        var files = Directory.GetFiles(path, "*", SearchOption.AllDirectories);
                        foreach (var f in files)
                        {
                            queue.Enqueue(f);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// JSON文字列を見やすくインデントします。
        /// </summary>
        /// <param name="intput">整形前のJSON文字列</param>
        /// <returns>整形後のJSON文字列</returns>
        private static string IndentJson(string inputJson)
        {
            try
            {
                // 入力チェック
                if (inputJson.Length == 0) { return string.Empty; }

                // JSON文字列をオブジェクトに変換
                var obj = JsonSerializer.Deserialize<object>(inputJson);

                // インデントのオプションを設定
                var options = new JsonSerializerOptions
                {
                    WriteIndented = true
                };

                // オブジェクトをインデント付きのJSON文字列に変換
                string indentedJson = JsonSerializer.Serialize(obj, options);
                return indentedJson;
            }
            catch (Exception ex)
            {
                // エラー表示
                Console.WriteLine("error: " + ex.Message);
                return string.Empty;
            }
        }
    }
}
